import cv2
import dlib
import numpy as np
from scipy.spatial import distance

# Load pre-trained face detector and shape predictor
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")

# Eye aspect ratio calculation
def eye_aspect_ratio(eye):
    A = distance.euclidean(eye[1], eye[5])  # Vertical distance
    B = distance.euclidean(eye[2], eye[4])  # Vertical distance
    C = distance.euclidean(eye[0], eye[3])  # Horizontal distance
    ear = (A + B) / (2.0 * C)
    return ear

# Indices for left and right eye in 68-landmarks model
LEFT_EYE = list(range(42, 48))
RIGHT_EYE = list(range(36, 42))

# Thresholds and counters
EAR_THRESHOLD = 0.25  # If EAR < 0.25, eyes are closed
CONSEC_FRAMES = 3      # Number of consecutive frames for valid blink
blink_counter = 0
closed_frames = 0
eye_closed = False

# Open video capture
cap = cv2.VideoCapture("video.mp4")  # Change to 0 for webcam

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = detector(gray)

    for face in faces:
        landmarks = predictor(gray, face)
        left_eye = np.array([(landmarks.part(n).x, landmarks.part(n).y) for n in LEFT_EYE])
        right_eye = np.array([(landmarks.part(n).x, landmarks.part(n).y) for n in RIGHT_EYE])

        left_ear = eye_aspect_ratio(left_eye)
        right_ear = eye_aspect_ratio(right_eye)
        avg_ear = (left_ear + right_ear) / 2.0  # Average EAR for both eyes

        # Check if eyes are closed
        if avg_ear < EAR_THRESHOLD:
            closed_frames += 1
            if not eye_closed and closed_frames >= CONSEC_FRAMES:
                blink_counter += 1
                eye_closed = True  # Mark eyes as closed
        else:
            closed_frames = 0
            eye_closed = False  # Reset when eyes are open

        # Draw eye landmarks
        for (x, y) in np.concatenate((left_eye, right_eye)):
            cv2.circle(frame, (x, y), 2, (0, 255, 0), -1)

    # Display the frame
    cv2.putText(frame, f"Blinks: {blink_counter}", (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
    cv2.imshow("Eye Blink Detection", frame)

    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

cap.release()
cv2.destroyAllWindows()

print(f"Total Blinks: {blink_counter}")
